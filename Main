import RPi.GPIO as GPIO
import os
import time
import cv2
import numpy as np
from pyzbar.pyzbar import decode

noche = True
ciclo = True
buscar = "6"
img = cv2.imread
cap = cv2.VideoCapture(0)
cap.set(3,640)
cap.set(4,480)
led = 2
buz = 3
ena = 18
in1 =23
in2 =24
enb = 19
in3 = 6
in4 = 5
GPIO.setmode(GPIO.BCM)
GPIO_TRIGGER = 27
GPIO_ECHO = 17
GPIO.setup(GPIO_TRIGGER, GPIO.OUT)
GPIO.setup(GPIO_ECHO,GPIO.OUT)
GPIO.setup(led, GPIO.OUT)
GPIO.setup(buz,GPIO.OUT)
GPIO.output(led,False)
if noche:
    GPIO.output(led,True)
GPIO.output(buz, False)

GPIO.setup(ena, GPIO.OUT)
GPIO.setup(enb,GPIO.OUT)
GPIO.setup(in1, GPIO.OUT)
GPIO.setup(in2,GPIO.OUT)
GPIO.setup(in3, GPIO.OUT)
GPIO.setup(in4,GPIO.OUT)

pwm_a = GPIO.PWM(ena,500)
pwm_b = GPIO.PWM(enb,500)

pwm_a.start(0)
pwm_b.start(0)

def normal():
    GPIO.output(in1,False)
    GPIO.output(in2,True)
    pwm_a.ChangeDutyCycle(int(25))
    GPIO.output(in3,False)
    GPIO.output(in4,True)
    pwm_b.ChangeDutyCycle(int(27))

def apagar():
    pwm_a.ChangeDutyCycle(int(0))
    pwm_b.ChangeDutyCycle(int(0))

def girar():
    GPIO.output(in1,False)
	GPIO.output(in2,True)
	pwm_a.ChangeDutyCycle(int(50))
	GPIO.output(in3,False)
	GPIO.output(in4,True)
	pwm_b.ChangeDutyCycle(int(0))
    time.sleep(0.5)
    GPIO.output(in1,False)
	GPIO.output(in2,True)
	pwm_a.ChangeDutyCycle(int(50))
	GPIO.output(in3,False)
	GPIO.output(in4,True)
	pwm_b.ChangeDutyCycle(int(50))
    time.sleep(0.5)
    GPIO.output(in1,False)
	GPIO.output(in2,True)
	pwm_a.ChangeDutyCycle(int(0))
	GPIO.output(in3,False)
	GPIO.output(in4,True)
	pwm_b.ChangeDutyCycle(int(50))
    time.sleep(0.5)
    GPIO.output(in1,False)
	GPIO.output(in2,True)
	pwm_a.ChangeDutyCycle(int(50))
	GPIO.output(in3,False)
	GPIO.output(in4,True)
	pwm_b.ChangeDutyCycle(int(50))
    time.sleep(0.5)
    GPIO.output(in1,False)
	GPIO.output(in2,True)
	pwm_a.ChangeDutyCycle(int(0))
	GPIO.output(in3,False)
	GPIO.output(in4,True)
	pwm_b.ChangeDutyCycle(int(50))
    time.sleep(0.5)
    GPIO.output(in1,False)
	GPIO.output(in2,True)
	pwm_a.ChangeDutyCycle(int(50))
	GPIO.output(in3,False)
	GPIO.output(in4,True)
	pwm_b.ChangeDutyCycle(int(50))
    time.sleep(0.5)
    GPIO.output(in1,False)
	GPIO.output(in2,True)
	pwm_a.ChangeDutyCycle(int(50))
	GPIO.output(in3,False)
	GPIO.output(in4,True)
	pwm_b.ChangeDutyCycle(int(0))
    time.sleep(0.5)
    normal()

def distance():
    GPIO.output(GPIO_TRIGGER,True)
    time.sleep(0.00001)
    
    GPIO.output(GPIO_TRIGGER,False)

    startTime = time.time()
    Stoptime = time.time()

    while GPIO.input(GPIO_ECHO) == 0:
        startTime = time.time()
    
    TimeElapsed = Stoptime - startTime
    distance = (TimeElapsed * 34300) / 2

    return distance

os.system('clear')
normal()

try:
    while ciclo:
        
        dist = distance()

        if dist < 7: #Se fija si hay objetos cercanos para evadirlos a traves de codigo
            apagar()
            time.sleep(0.5)
            girar()
        success, img = cap.read()
        for barcode in decode(img):
    #        print(barcode.data)
            mydata = barcode.data.decode('utf-8')
            print(mydata)
            pts = np.array([barcode.polygon],np.int32)
            pts = pts.reshape((-1,1,2))
            cv2.polylines(img,[pts],True,(255,0,255),5)
            pts2 = barcode.rect
            cv2.putText(img,mydata,(pts2[0],pts2[1]),cv2.FONT_HERSHEY_SIMPLEX,0.9,(255,255,255),2)
        cv2.imshow('Result',img)
        cv2.waitKey(1)
    else:
        apagar()
        GPIO.output(led,True)
        GPIO.output(buz,True)
        time.sleep(0.5)
        GPIO.output(led,False)
        time.sleep(0.5)
        GPIO.output(buz,True)
        time.sleep(0.5)
        GPIO.output(led,False)
        time.sleep(0.5)
        GPIO.output(buz,True)

except:KeyboardInterrupt:
    pwm_a.stop()
    pwm_b.stop()
    GPIO.cleanup()
    os.system('clear')
    print("PRograma terminado")
    exit()
